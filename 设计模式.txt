

1.单一职责     ===> 
2.里氏替换法则 （调用父类的对象，也能被子类替换）
3.依赖倒置原则  （抽象不依赖细节， 面向接口编程，传递参数尽量尽量引用层次高的类） 这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。

4.迪米特法则   ===> 最少知道原则，一个类对其他类知道的越少越好。
5.接口隔离原则 ===> （每个接口是一种角色） 使用多个隔离的接口，比使用单个接口要好
6.开闭原则(对扩展开发，对修改关闭)



合成（包含关系， 翅膀---大雁）/聚合（关联关系，大雁---雁群）复用原则：尽量使用合成聚合，尽量不要使用继承





高内聚，低耦合

创建型模式：单例模式，（简单工厂，工厂，抽象工厂模式），创建者模式， 原型模式。
本人理解：以C++为例，创建对象时，用关键字new来创建（实例化）对象。用一个函数或类将new的过程封装起来，就是创建型模式。


《设计模式》中的描述：
创建型模式抽象了实例化过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。
一个类----创建型模式使用继承改变被实例化的类，
一个对象-创建型模式将实例化委托给另一个对象。







结构型模式：适配器模式，桥接模式，装饰模式， 组合模式，外观模式， 享元模式，代理模式

本人理解：创建型模式关注一个类或对象的实例化；结构型模式关注多个类或对象组合成更复杂的对象，是为了更灵活的构造对象。

《设计模式》中的描述：结构性模式涉及到如何组合类和对象以获得更大的结构。
结构型类----模式采用继承机制来组合接口和实现。
结构型对象-模式不是对接口和实现进行组合，而是描述了如何对一些对象进行组合，从而实现新功能的一些方法。




行为型模式:

责任链模式（Chain of Responsibility Pattern）
命令模式（Command Pattern）
解释器模式（Interpreter Pattern）
迭代器模式（Iterator Pattern）
中介者模式（Mediator Pattern）
备忘录模式（Memento Pattern）
观察者模式（Observer Pattern）
状态模式（State Pattern）
空对象模式（Null Object Pattern）
策略模式（Strategy Pattern)
模板模式（Template Pattern)
访问者模式（Visitor Pattern)





本人理解：上述两种模式都是出于一定目的（复用代码、修改时更灵活、容易维护等等）创建对象，对象之间一通信，一个程序就跑起来啦，把对象之间通信这部分，再总结总结，起个名字，就叫“行为型模式”。

《设计模式》中的描述：行为模式涉及到算法和对象间职责的分配。
行为模式不仅描述对象和类的模式，还描述它们之间的通信模式。
行为模式使用继承机制在类间分派行为。（还是一头雾水）






