


Redis的全称是远程字典服务(remote dictionary service)

object encoding key




Redis:快速的原因：存储在内存， IO多路（多个网络连接）复用（复用同一个线程）， 异步IO


使用要求：存的进，取的出。




编码文档：https://blog.csdn.net/zwx900102/article/details/109543659


为什么Redis的字符串对象是二进制安全的

在C语言中，字符串采用的是一个char数组(柔性数组)来存储字符串，而且字符串必须要以一个空字符串’\0’来结尾。字符串并不记录长度，所以如果想要获取一个字符串的长度就必须遍历整个字符串，直到遇到’\0’为止(’\0’不会计入长度)，时间复杂度为O(n)。

正因为C语言中是以空字符’\0’来识别是否到了字符串末尾，因此其只能保存文本数据，不能保存图片，音频，视频和压缩文件等二进制数据，所以就是二进制不安全的。

Redis中为了实现二进制安全的字符串，对原有的C语言中的字符串做了改进。如下所示就是一个SDS字符串的结构：

struct sdshdr{
  int len;//记录buf数组已使用的长度，即SDS的长度(不包含末尾的'\0')
  int free;//记录buf数组中未使用的长度
  char buf[];//字节数组，用来保存字符串
}
经过改进之后，在Redis中如果想要获取SDS的长度不用去遍历buf数组了，直接读取len属性就可以得到长度，时间复杂度一下就变成了O(1)，效率大大提升，而且因为判断字符串长度不再依赖空字符’\0’，所以其能存储图片，音频，视频和压缩文件等二进制数据。


内部数据结构：

list 列表： 
		ziplist:当列表的元素个数小于list-max-ziplist-entries配置（ 默认512个） ， 同时列表中每个元素的值都小于list-max-ziplist 默认64字节） ， Redis会选用ziplist来作为列表的内部实现来减少内存的使用
 		linkedlist:双向链表编码
 		quicklist:Redis3.2版本提供了quicklist内部编码， 简单地说它是以一个ziplist为节点的linkedlist，它结合了ziplist和linkedlist两者的优势， 为列表类型提供了一种更为优秀的内部编码实现


string 字符串： int , raw, embstr
字符串类型的内部编码有3种：
int： 8个字节的长整型。
embstr：小于等于44个字节的字符串(3.2版本之前是39)时。(创建连续的内存空间）
	embstr开辟连续的内存可以带来的优势：
    内存释放是embstr只需要释放一次，而raw需要释放两次
    emstr查找的更快

raw： 大于44个字节的字符串(3.2版本之前是39)时。（raw会分别两次创建redisObject结构与sdshdr结构，内存不一定是连续的）


应用场景：访问量



hash 哈希：  
	hashtable：
	ziplist:提高了内存使用率,并且可以方便的从两边遍历数据,但是因为它把数据保存在一块连续的内存空间中,所以它并不适合频繁的删除,插入,修改操作。

　  listpack：的出现并不能解决链表中频繁插入和删除造成的重新申请空间和复制数据的问题,主要为了解决级联更新的问题,未来redis可能会使用listpack完全替代ziplist.

　在redis6.*中listpack已经被用在在hash类型中替代ziplist了,暂时只有hash中使用

set 集合：

	hashtable:当集合类型无法满足intset的条件时， Redis会使用hashtable作为集合的内部实现。

	intset:（ 整数集合） ： 当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（ 默认512个） 时， Redis会选用intset来作为集合的内部实现， 从而减少内存的使用。

	应用场景：朋友圈点赞，取消点赞，点赞列表;    猜你喜欢，可能认识的人



zset 有序集合：
	skiplist:当ziplist条件不满足时， 有序集合会使用skiplist作为内部实现， 因为此时ziplist的读写效率会下降
	ziplist:当有序集合的元素个数小于zset-max-ziplist-entries配置（ 默认128个） ， 同时每个元素的值都小于zset-max-ziplist-value配
置（ 默认64字节） 时， Redis会用ziplist来作为有序集合的内部实现， ziplist可以有效减少内存的使用
	listpack:



watch命令:添加乐观锁，被不同的客户端修改数据后，会执行操作失败。

multi :事物

exec: 提交事物


持久化

	rdb：二进制文件

	aof：保存命令操作








redis单线程的优缺点：  Redis单线程指的是对数据进行处理的单线程， redis6版本新增网络I/O多线程，增加了网络的并发能力，redis持久化，集群同步等操作，则是由另外的线程来执行







为啥单线程还这么快：单线成避免了多线程之间资源的竞争，采用I/O多路复用机制处理大量的客户端Socket请求





缓存雪崩：大量的缓存键失效

缓存穿透： 查询缓存中不存在的数据时，每次都要从数据库中查找


缓存击穿： 缓存键失效， 导致客户端查找数据库，   

















