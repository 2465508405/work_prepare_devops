
MySQL中至少有7种日志文件：

重做日志（redo log）
    redo log

	作用：
	确保事务的持久性。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启MySQL服务时，可根据redo log进行重做，从而达到事务的持久性这一特性。

	内容：
	物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序写入redo log file的物理文件中去的。


	删除时间：
	当对应事务的脏页写入到磁盘之后，redo log的使命完成，重做日志占用的空间就可以重用（被覆盖）。

	对应的物理文件：
	默认情况下，对应的物理文件位于数据库的data目录下的ib_logfile1, ib_logfile2，innodb_log_group_home_dir 指定日志文件组所在的路径，默认./，表示在数据库的数据目录下。

	redolog的大小是固定的，MySQL中可通过修改以下2个配置参数，redolog采用循环写的方式记录，当写到结尾时，会回到开头循环写日志：
	innodb_log_file_size：文件大小
	innodb_log_files_in_group：文件数量，默认2

    回滚日志（undo log）
    二进制日志（binlog）
    错误日志（errorlog）
    慢查询日志（slow query log）
    一般查询日志（general log）
    中继日志（relay log）。



mysql索引原理和优化方法：


理解mysql innodb的索引原理


b+tree相对于其他索引数据结构的优势.  : b+数只在叶子结点存储数据， b数在叶子结点及非叶子结点都存储数据，单个结点的数据更少，在相同的I/O次数下，可以查询更多的结点； b+树叶子结点采用的是双向链表，基于范围的查找更加方便，b树无法做到这一点，
二叉树的结点父结点只能有两个字结点，二叉树的层级更多



从低到高的索引操作顺序：
type类型：
all(全表扫描） < index(全索引扫描) < range (索引范围扫描) < ref(非唯一索引扫描) < eq_ref(唯一索引扫描) < const(结果只有一条的主键或唯一索引扫描)
system>const>eq_ref>ref>range>index>ALL 


const, system:mysql对某部分查询进行优化转为一个常量，用于primary key或unique key的所有列与常数比较时。
eq_ref：primary key或unique key索引的所有部分被连接使用，最多只会返回一条符合条件的记录

ref：相比eq_ref,不使用唯一索引，而是使用普通索引或者唯一索引的部分前缀。 a.简单的select查询

range：范围扫描通常出现在in(),between,<,>.>=等操作中。
index:扫描全索引就能拿到的结果
ALL:全表扫描








possible_keys:可能用到的索引
key:字段实际用到的索引
ken_len:索引的长度. 表示索引使用的字节数（char(n)就是3n个字节，varchar(n)就是3n+2个字节加的2个字节用来存储字符串长度，因为varchar是变长字符串；date是3个字节；timestamp是4个字节；datetime是8个字节）
rows:扫面的行数
type: 扫描类型
ref: 显示了再key列记录的索引
rows列：mysql估计要读取并检测的行数，但这个可能不是结果集中的行数

Extra列：额外信息 1）Using index：使用覆盖索引，即select后面的查询字段可以从索引树中获取


掌握mysql执行计划的方法


掌握导致索引失效的常见情况

掌握实际工作中常用的建立高效索引的技巧





死锁是如何产生的？  以及如何避免死锁?    线程A与线程B对资源进行相互竞争，等待释放的过程产生的阻塞



